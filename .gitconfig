[alias]
	df = diff
	dfs = diff --staged
	ui = always
	status = always
	branch = always
	diff = always
	interactive = always
	a = add
	aa = add --all
	ae = add --edit
	ai = add --interactive
	amend = commit --amend -C HEAD
	ap = add --patch
	au = add --update
	authors = !git log --pretty=format:%aN | sort | uniq -c | sort -rn
	b = branch -vv
	br = "!f() { git branch --track $1 origin/$1; }; f" # create local version of specified remote branch
	brcr = !sh -c 'git push origin HEAD:refs/heads/$1 && git fetch origin && git branch --track $1 origin/$1 && cd . && git checkout $1' - # branch create
	brmv = "!f() { git branch -m $1 $2 && git push origin :$1 && git push -u origin $2; }; f" # branch move (rename)
	brrm = "!f() { git push origin :$1 && git remote prune origin && git branch -d $1; }; f" # remove branch
	c = commit
	ca = commit --all -m
	cam = commit --amend
	changes = diff --name-status -r
	check = diff --check
	cl = clean -d -f
	cm = commit --message
	co = checkout
	cob = checkout -b # checkout and create branch
	conflicted = grep --name-only --full-name '<<<<<<< HEAD'
	cpc = cherry-pick
	d = diff --ignore-all-space
	dc = diff --cached --ignore-all-space
	dcw = diff --color-words
	div = divergence
	dt = difftool
	h = help
	i = integrate
	is = wtf --relations --short # integration status
	latest = for-each-ref --count=10 --sort=-committerdate --format='%(committerdate:short) %(refname:short)'
	ls-ignored = ls-files --exclude-standard --ignored --others
	m = merge -s recursive -X patience
	markdown = !BN=$(git name-rev --name-only HEAD) && git log --no-merges --grep=$BN --pretty=oneline | awk -F$BN: '{print \"-\", $NF}' | uniq
	mm = merge --no-ff
	merge-branch = !git checkout master && git merge @{-1}
	msg = commit --allow-empty -m
	pick = cherry-pick
	pr = !hub pull-request
	prune-remotes = "!for remote in `git remote`; do git remote prune $remote; done"
	r = remote
	rb = rebase
	rba = rebase --abort
	rbc = rebase --continue
	rbs = rebase --skip
	ri = rebase --interactive --autosquash
  fix = "!f() { git commit -am \"fixup! $(git log -1 --format='%s' $1)\n\n$2\"; }; f" # fixup [COMMIT] [MESSAGE] - fixup this commit onto specified or last commit
  sq = "!f() { git commit -am \"squash! $(git log -1 --format='%s' $1)\n\n$2\"; }; f" # squash [COMMIT] [MESSAGE] - squash this commit onto specified or last commit
	rs = remote show
	rso = remote show origin
	rh = reset --hard
	ru = remote update --prune
	s = status --short --branch
	sm = submodule
	sma = submodule add
	smu = submodule update --init
	st = stash
	stl = stash list
	stp = stash pop
	undo = reset --soft HEAD@{1}
	wd = diff --word-diff=color
	wdc = diff --word-diff=color--cached
	push = push --tags

	# log
	l = !git --no-pager log --graph --pretty=format:'%Cred%h%Creset%C(yellow)%d%Creset %s' --abbrev-commit --date=relative -20 # log
	logo = !git --no-pager log --oneline -1 # log one
	logb = !git --no-pager log --oneline -20 # log brief
	logg = log --graph --pretty=format:'%Cred%h%Creset%C(yellow)%d%Creset %s' --abbrev-commit --date=relative # log graph
	logd = log --graph --pretty=format:'%Cred%h%Creset %an -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative # log detail
	news = log -p HEAD@{1}..HEAD@{0}
[color]
	ui = auto
[core]
	autocrlf = false
	excludesfile = ~/.gitignore
[push]
	default = current # http://prgmr.io/coding/git-push-default/
[diff]
	tool = bc
[difftool]
	prompt = false
[merge]
	tool = bc
[mergetool]
	prompt = false
	keepBackup = false
[rebase]
	autosquash = true
[user]
	name = John Butare
	email = john.butare@intel.com
[https]
	#proxy = http://proxy.rr.intel.com:911
[http]
	#proxy = http://proxy.rr.intel.com:911
[hub]
	host = github.intel.com
	protocol = https
[git-up "fetch"]
	prune = true
[git-up "rebase"]
	auto = true
