[alias]

	# test
	test = "!f() { [[ ! $2 ]] && { echo hi; return 1; }; echo $2; }; f"
	t1 = "!f() { local cb="$(git cb)"; }; f"
	t2 = "!f() { local cb="$(git symbolic-ref -q HEAD | cut -d"/" -f 3)"; }; f"

	# always
	ui = always
	status = always
	branch = always
	diff = always
	interactive = always

	# other
	ls-ignored = ls-files --exclude-standard --ignored --others
	pr2 = !hub pull-request # in git-extras

	# add
	a = add
	aa = add --all
	ae = add --edit
	ai = add --interactive
	ap = add --patch
	au = add --update

	# branch
	b = branch -vv													# branch status
	br = "!f() { git branch --track $1 origin/$1; git checkout $1; }; f" # create local version of specified remote branch
	brcr = "!f() { [[ ! $3 ]] && { echo "An existing branch is required" ; return 1; }; git branch $2 $3 && git push -u origin $2 && git checkout $2; }; f" - # branch create NEW EXISTING
	brex = "!f() { git rev-parse --verify $1 >& /dev/null; }; f" # branch exist
	brh = "!f() { cb="$(git symbolic-ref -q HEAD | cut -d"/" -f 3)"; git checkout $1 && git reset --hard $cb && git push --force; git checkout $cb; }; f" # brh BRANCH, branch reset here, reset the specified branch to the current branch return to the current branch
	brmv = "!f() { git branch -m $1 $2 && git push origin :$1 && git push -u origin $2; }; f" # branch move (rename)
	bro = "!f() { cb="$(git symbolic-ref -q HEAD | cut -d"/" -f 3)"; git checkout $1 && git reset --hard origin/$1; git checkout $cb; }; f" # bro BRANCH, branch reset origin, reset the specified branch to it's origin and return to the current branch
	brrm = "!f() { git branch -d $1; git push origin :$1 && git remote prune origin; }; f" # remove branch
	bs = branch-status												# branch status [PATTERN]
	cb = "!f() { git symbolic-ref -q HEAD | cut -d"/" -f 3; }; f"	# branch current
	co = checkout
	cob = checkout -b # checkout and create branch
	fr = "!f() { git brmv $1 Frozen-$1; }; f" 		# branch rename to Frozen-
	ufr = "!f() { echo git brmv "$1" "${1/Frozen-/}"; }; f" # branch rename without Frozen-

	# branch list
	ls = "!f()   { git show-ref | cut -f 2 -d' ' | cut -f 3-5 -d'/' | sort | grep -E '^[ ]*'$1; }; f" # list, ls PATTERN
	lsv = "branch -avv" # list verbose
	tls = "!f()  { git show-ref | grep 'refs/tags' | cut -f 2 -d' ' | cut -f 3-5 -d'/' | sed 's/v//' | sed 's/\\./,/g' | sort -n | sed 's/,/\\./g' | grep -E '^[ ]*'$1; }; f" # list tag, tls [PATTERN]
	bls = "!f()  { git show-ref | grep 'refs/heads' | cut -f 2 -d' ' | cut -f 3-5 -d'/' | sort | grep -E '^[ ]*'$1;  }; f" # list branch, bls PATTERN
	rbls = "!f() { git show-ref | grep 'refs/remotes/origin' | cut -f 2 -d' ' | cut -f 4-5 -d'/' | sort | grep -E '^[ ]*'$1; }; f" # list remote branch, rbls PATTERN

	# branch integrate
	i = integrate # i INTEGRATION_BRANCH, integrate current branch to integration branch,
	ic = "!f() { git checkout $1 && git reset --hard $2 && git push --force; }; f" # integration branch clean to version, integration clean to specified branch, g ic INTEGRATION_BRANCH BRANCH
	ir = "!f() { local cb="$(git symbolic-ref -q HEAD | cut -d"/" -f 3)"; git checkout $1 && git reset --hard origin/$1; git checkout $cb; }; f" # ir INTEGRATION_BRANCH, reset the INTEGRATION_BRANCH to origin
	is = wtf --relations --short # integration status
	
	# cherry-pick
	cpc = cherry-pick
	pick = cherry-pick

	# clean
	cl = clean -d -f
	cla = clean -d -x -i # clean all [PATTERN, i.e. */Bin/]
	clvs =  clean -d -x -i -e '*.dbmdl' -e '*.user' -e '*.suo' # clean all except Visual Studio user files

	# commit
	amend = commit --amend -C HEAD
	amendAll = commit --all --amend -C HEAD
	c = commit
	ca = commit --all -m
	cam = commit --amend
	cm = commit --message
	msg = commit --allow-empty -m

	# diff
	changes = diff --name-status -r
	check = diff --check
	d = diff --ignore-all-space
	dc = diff --cached --ignore-all-space
	dcw = diff --color-words
	df = diff
	dfs = diff --staged
	div = divergence
	dt = difftool
	mt = mergetool
	wd = diff --word-diff=color
	wdc = diff --word-diff=color--cached

	# log
	authors2 = !git log --pretty=format:%aN | sort | uniq -c | sort -r # in git-extras
	l = !git --no-pager log --graph --pretty=format:'%Cred%h%Creset%C(yellow)%d%Creset %s' --abbrev-commit --date=relative -30 # log
	latest = for-each-ref --count=10 --sort=-committerdate --format='%(committerdate:short) %(refname:short)'
	ld = !git --no-pager log --graph --pretty='%cD %Cred%h%Creset%C(yellow)%d%Creset %s' --abbrev-commit --date=relative -30 # log
	logo = !git --no-pager log --oneline -1 # log one
	logb = !git --no-pager log -10 --graph --pretty=format:'%Cred%h%Creset %an -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative --branches --remotes # log brief
	logg = log --remotes --graph --pretty=format:'%Cred%h%Creset%C(yellow)%d%Creset %s' --abbrev-commit --date=relative # log graph
	logd = log --graph --pretty=format:'%Cred%h%Creset %an -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative # log detail
	loga = log --graph --pretty=format:'%Cred%h%Creset %an -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative --branches --remotes # log all
	markdown = !BN=$(git name-rev --name-only HEAD) && git log --no-merges --grep=$BN --pretty=oneline | awk -F$BN: '{print \"-\", $NF}' | uniq
	news = log -p HEAD@{1}..HEAD@{0}
	s = status --short --branch

	# merge
	conflicted = grep --name-only --full-name '<<<<<<< HEAD'
	m = merge -s recursive -X patience
	merge-branch = !git checkout master && git merge @{-1}
	mm = merge --no-ff

	# rebase
	rb = rebase
	rba = rebase --abort
	rbc = rebase --continue
	rbs = rebase --skip
	rbi = rebase --interactive --autosquash
	rbia = "!f() { git rebase --interactive --autosquash HEAD~$((1 + $(git --no-pager log --pretty=format:'%s' --abbrev-commit -40 | grep '^fixup!' | wc -l))); }; f" # rebase interactive auto, rebase all fixup! commits
	rbo = rebase HEAD~1 --onto # rebase onto
	rf = "!f() { git commit -am \"fixup! $(git log -1 --format='%s' $1)\n\n$2\"; }; f" # fixup [COMMIT] [MESSAGE] - rebase fix, commit changes as a fixup commit
	rsq = "!f() { git commit -am \"squash! $(git log -1 --format='%s' $1)\n\n$2\"; }; f" # squash [COMMIT] [MESSAGE] - rebase squas, commit changes as a squash commit

	# reset
	undo2 = reset --soft HEAD@{1} # in git-extras
	rb = "!f() { local cb="$(git symbolic-ref -q HEAD | cut -d"/" -f 3)" && git reset --hard "$cb" && git clean -f -d; }; f" # ro, reset branch
	rbo = "!f() { local cb="$(git symbolic-ref -q HEAD | cut -d"/" -f 3)" && git reset --hard "origin/$cb" && git clean -f -d; }; f" # ro, reset branch to origin

	# remote
	ft = fetch --tags
	prune-remotes = "!for remote in `git remote`; do git remote prune $remote; done"
	push = push --tags
	r = remote
	rs = remote show # show
	rso = remote show origin # show origin
	rpo = remote prune origin # prune origin
	ru = remote update --prune
	rua = "!f() { git ft; git rpo; }; f" # update all

	# stash
	st = stash
	stl = stash list
	stp = stash pop

	# tag
	tagcr = "!f() { git tag $1; git push origin $1; }; f" # remove # create
	tagp = git push origin # push origin
	tagrm = "!f() { git tag -d $1; git push origin -d $1 && git remote prune origin; }; f" # remove
	tagr = "!f() { git tagrm $1; git tagcr $1; }; f" # replace
	tagmv = "!f() { git tagrm $1; git tagcr $1; }; f" # move

	# reflog
	rl = "!f() { git reflog | head -40; }; f" # reflog

	# submodule
	sm = submodule
	sma = submodule add
	smu = submodule update --init

# standard configuration
[checkout]
	defaultRemote = origin
[color]
	ui = auto
[core]
	autocrlf = false
	excludesfile = ~/.gitignore
	editor = TextEdit --wait
	pager = delta
[diff]
	tool = bc
	guitool = bc
[difftool]
	prompt = false
[difftool "bc"]
	cmd = BeyondCompare --wait \"$LOCAL\" \"$REMOTE\"
[https]
	#proxy = http://proxy.rr.intel.com:911
[http]
	#proxy = http://proxy.rr.intel.com:911
[interactive]
	diffFilter = delta --color-only --features=interactive
[merge]
	tool = bc
[mergetool]
	prompt = false
	keepBackup = false
[mergetool "bc"]
	cmd = BeyondCompare --wait \"$LOCAL\" \"$REMOTE\" \"$BASE\" \"$MERGED\"
[pull]
	ff = only
[push]
	default = current # http://prgmr.io/coding/git-push-default/
[rebase]
	autosquash = true
[user]
	name = John Butare
	email = johns@butare.net

# delta
[delta]
    features = decorations

[delta "interactive"]
    keep-plus-minus-markers = false

[delta "decorations"]
    commit-decoration-style = blue ol
    commit-style = raw
    file-style = omit
    hunk-header-decoration-style = blue box
    hunk-header-file-style = red
    hunk-header-line-number-style = "#067a00"
    hunk-header-style = file line-number syntax

# other commands
[cola]
	spellcheck = false
[git-up "fetch"]
	prune = true
[git-up "rebase"]
	auto = false
[hub]
	host = github.intel.com
	protocol = https
[winUpdater]
	recentlySeenVersion = 2.20.1.windows.1
[safe]
	directory = %(prefix)///wsl.localhost/Ubuntu/usr/local/data/bin
	directory = %(prefix)///wsl.localhost/Ubuntu/home/jjbutare/data/bin
[credential "https://github.com"]
	helper = 
	helper = !/usr/bin/gh auth git-credential
[credential "https://gist.github.com"]
	# helper = 
	helper = !/usr/local/bin/gh auth git-credential
